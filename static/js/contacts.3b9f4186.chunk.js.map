{"version":3,"sources":["utils/YupValidationSchemes.js","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","components/Form/ContactsForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","pages/ContactsPage/ContactsPage.jsx"],"names":["addContactValidationSchema","Yup","shape","name","min","max","required","number","phone","LogInValidationSchema","email","password","registerValidationSchema","Overlay","ModalContent","Button","modalRoot","document","querySelector","Modal","closeModal","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","event","code","createPortal","onClick","target","currentTarget","type","ContactsForm","contacts","useSelector","getFiltredContactsList","dispatch","useDispatch","nameInputId","nanoid","phoneInputId","initialValues","validationSchema","onSubmit","values","newContact","resetForm","some","toast","error","addContact","success","autoComplete","htmlFor","id","placeholder","component","ValidationMessage","SearchWrapper","InputStyled","Filter","filter","getFilterValue","useState","toggle","setToggle","handleToggleOnClick","value","onChange","setFilterValue","List","Item","Div","ContactsList","isLoading","getLoadingStatus","fetchContacts","map","size","deleteContact","handleOnDeleteBtn","ContactsPage"],"mappings":"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","file":"static/js/contacts.3b9f4186.chunk.js","sourcesContent":["import * as Yup from \"yup\";\nimport \"yup-phone\";\n\nconst addContactValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  number: Yup.string().phone(\"+38\", true, \"Valid number type +380XXXXXXXXX\"),\n});\n\nconst LogInValidationSchema = Yup.object().shape({\n  email: Yup.string().email().required(\"Required\"),\n  password: Yup.string()\n    .min(7, \"Password is too short - should be 7 chars minimum\")\n    .required(\"Required\"),\n});\n\nconst registerValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  email: Yup.string().email().required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password is too short - should be 6 chars minimum\")\n    .required(\"Required\"),\n});\n\nexport {\n  addContactValidationSchema,\n  LogInValidationSchema,\n  registerValidationSchema,\n};\n","import styled from \"@emotion/styled/macro\";\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.6);\n  z-index: 100;\n`;\n\nexport const ModalContent = styled.div`\n  position: relative;\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n\nexport const Button = styled.div`\n  position: absolute;\n  top: -3%;\n  right: -3%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px;\n  background-color: white;\n  color: #ca1277;\n  border: 3px solid steelblue;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: lightsteelblue;\n    box-shadow: 0px 1px 12px 4px rgba(255, 255, 255, 0.3);\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { CgClose } from \"react-icons/cg\";\nimport { Overlay, ModalContent, Button } from \"components/Modal/Modal.styled\";\n\nconst modalRoot = document.querySelector(\"#modal-root\");\n\nfunction Modal({ closeModal, children }) {\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  });\n\n  const handleKeyDown = (event) => {\n    if (event.code === \"Escape\") {\n      closeModal();\n    }\n  };\n\n  const handleOnOverlayClick = (event) => {\n    if (event.target === event.currentTarget) {\n      closeModal();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleOnOverlayClick}>\n      <ModalContent>\n        <Button type=\"button\" onClick={() => closeModal()}>\n          <CgClose />\n        </Button>\n        {children}\n      </ModalContent>\n    </Overlay>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Modal;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport { addContactValidationSchema } from \"utils/YupValidationSchemes\";\nimport { addContact, getFiltredContactsList } from \"redux/contacts\";\nimport {\n  FormStyled,\n  FieldStyled,\n  Button,\n  Label,\n  ValidationMessage,\n} from \"styles/common.styled\";\nimport toast from \"react-hot-toast\";\n\nfunction ContactsForm() {\n  const contacts = useSelector(getFiltredContactsList);\n  const dispatch = useDispatch();\n\n  const handleAddContactOnSubmit = (newContact) => {\n    if (contacts.some(({ name }) => name === newContact.name)) {\n      toast.error(`Contact ${newContact.name} already exists`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    toast.success(`Contact ${newContact.name} created`);\n  };\n\n  let nameInputId = nanoid(3);\n  let phoneInputId = nanoid(3);\n\n  return (\n    <Formik\n      initialValues={{ name: \"\", number: \"\" }}\n      validationSchema={addContactValidationSchema}\n      onSubmit={(values, { resetForm }) => {\n        const { name, number } = values;\n        handleAddContactOnSubmit({ name, number });\n        resetForm();\n      }}\n    >\n      <FormStyled autoComplete=\"off\">\n        <Label htmlFor={`id-${nameInputId}`}>Name</Label>\n        <FieldStyled\n          id={`id-${nameInputId}`}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n        />\n        <ErrorMessage name=\"name\" component={ValidationMessage} />\n\n        <Label htmlFor={`id-${phoneInputId}`}>Number</Label>\n        <FieldStyled\n          id={`id-${phoneInputId}`}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"+38 (XXX) XXX-XX-XX\"\n        />\n        <ErrorMessage name=\"number\" component={ValidationMessage} />\n\n        <Button type=\"submit\">Add contact</Button>\n      </FormStyled>\n    </Formik>\n  );\n}\n\nexport default ContactsForm;\n","import styled from \"@emotion/styled/macro\";\n\nexport const SearchWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: 600px;\n  margin-top: 30px;\n  margin-bottom: 30px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Button = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px;\n  margin-right: 20px;\n  background-color: whitesmoke;\n  color: #ca1277;\n  border: 1px solid transparent;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: lightsteelblue;\n    color: white;\n    box-shadow: 0px 1px 12px 4px rgba(255, 255, 255, 0.3);\n  }\n`;\n\nexport const InputStyled = styled.input`\n  width: 100%;\n  color: darkblue;\n  background-color: whitesmoke;\n  border: 2px solid steelblue;\n  border-radius: 5px;\n  padding-left: 10px;\n  font-size: 14px;\n  &:hover,\n  &:focus {\n    box-shadow: rgba(188, 188, 235, 0.3) 0px 2px 8px,\n      rgba(188, 188, 235, 0.3) 0px 4px 12px,\n      rgba(188, 188, 235, 0.3) 0px 8px 28px;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport { RiUserAddFill } from \"react-icons/ri\";\nimport { getFilterValue } from \"redux/contacts\";\nimport { setFilterValue } from \"redux/contacts/contacts-slices\";\nimport Modal from \"components/Modal/Modal\";\nimport ContactsForm from \"components/Form/ContactsForm\";\nimport {\n  InputStyled,\n  SearchWrapper,\n  Button,\n} from \"components/Filter/Filter.styled\";\n\nfunction Filter() {\n  const filter = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n  const [toggle, setToggle] = useState(false);\n\n  const handleToggleOnClick = () => setToggle(!toggle);\n\n  return (\n    <>\n      <SearchWrapper>\n        <Button onClick={handleToggleOnClick}>\n          <RiUserAddFill />\n        </Button>\n        <InputStyled\n          id={`id-${nanoid(3)}`}\n          type=\"text\"\n          name=\"name\"\n          value={filter}\n          onChange={(event) => dispatch(setFilterValue(event.target.value))}\n          placeholder=\"Search\"\n          autoComplete=\"off\"\n        />\n      </SearchWrapper>\n      {toggle && (\n        <Modal closeModal={handleToggleOnClick}>\n          <ContactsForm />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import styled from \"@emotion/styled/macro\";\n\nexport const List = styled.ul`\n  width: 100%;\n  max-width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n  width: 100%;\n  padding: 10px 12px;\n  background-color: whitesmoke;\n  border: 2px solid steelblue;\n  border-radius: 5px;\n  animation: scaleIn 1s cubic-bezier(0.465, 0.183, 0.153, 0.946);\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n  &:hover,\n  &:focus {\n    box-shadow: rgba(188, 188, 235, 0.3) 0px 2px 8px,\n      rgba(188, 188, 235, 0.3) 0px 4px 12px,\n      rgba(188, 188, 235, 0.3) 0px 8px 28px;\n  }\n\n  @keyframes scaleIn {\n    from {\n      transform: scale(0);\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n  @media screen and (min-width: 425px) {\n    font-size: 16px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 60px;\n  padding: 10px;\n  margin-left: 10px;\n  margin-right: 10px;\n\n  font-size: 12px;\n  font-weight: 700;\n  color: whitesmoke;\n  background-color: steelblue;\n  border: 1px solid transparent;\n  border-radius: 5px;\n  cursor: pointer;\n  text-transform: uppercase;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: #ca1277;\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\n  }\n\n  @media screen and (min-width: 425px) {\n    min-width: 80px;\n    padding: 4px 10px;\n  }\n  @media screen and (min-width: 768px) {\n    min-width: 150px;\n    padding: 8px 12px;\n  }\n`;\n\nexport const Div = styled.div`\n  color: steelblue;\n  & > svg {\n    color: steelblue;\n    width: 20px;\n    margin-right: 3px;\n  }\n\n  &:not(:last-child) {\n    text-transform: capitalize;\n    color: #ca1277;\n    margin-bottom: 5px;\n  }\n\n  @media screen and (min-width: 725px) {\n    & > svg {\n      width: 25px;\n      margin-right: 0;\n    }\n  }\n\n  @media screen and (min-width: 768px) {\n    & > svg {\n      width: 35px;\n    }\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FaUser, FaPhoneAlt } from \"react-icons/fa\";\nimport {\n  fetchContacts,\n  deleteContact,\n  getFiltredContactsList,\n  getLoadingStatus,\n} from \"redux/contacts\";\nimport toast from \"react-hot-toast\";\nimport {\n  List,\n  Item,\n  Div,\n  Button,\n} from \"components/ContactsList/ContactsList.styled\";\n\nfunction ContactsList() {\n  const isLoading = useSelector(getLoadingStatus);\n  const contacts = useSelector(getFiltredContactsList);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleOnDeleteBtn = (id, name) => {\n    dispatch(deleteContact(id));\n    toast.success(`Contact ${name} deleted`);\n  };\n\n  return (\n    <List>\n      {contacts &&\n        contacts.map(({ id, name, number }) => {\n          return (\n            <Item key={id}>\n              <div>\n                <Div>\n                  <FaUser size={16} />\n                  <span>\n                    <b>{name}</b>\n                  </span>\n                </Div>\n                <Div>\n                  <FaPhoneAlt size={16} />\n                  <span>{number}</span>\n                </Div>\n              </div>\n              <Button type=\"button\" onClick={() => handleOnDeleteBtn(id, name)}>\n                Delete\n              </Button>\n            </Item>\n          );\n        })}\n      {isLoading && <div>Loading...</div>}\n    </List>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n};\n\nexport default ContactsList;\n","import Filter from \"components/Filter/Filter\";\nimport ContactsList from \"components/ContactsList/ContactsList\";\n\nfunction ContactsPage() {\n  return (\n    <>\n      <Filter />\n      <ContactsList />\n    </>\n  );\n}\n\nexport default ContactsPage;\n"],"sourceRoot":""}