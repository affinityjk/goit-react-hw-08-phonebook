{"version":3,"sources":["utils/YupValidationSchemes.js","pages/RegisterPage/RegisterPage.jsx"],"names":["addContactValidationSchema","Yup","shape","name","min","max","required","number","phone","LogInValidationSchema","email","password","registerValidationSchema","RegisterPage","dispatch","useDispatch","nameInputId","nanoid","emailInputId","passwordInputId","initialValues","validationSchema","onSubmit","values","newUser","resetForm","signUp","autoComplete","htmlFor","type","id","placeholder","component","ValidationMessage"],"mappings":"gJAAA,mHAGMA,GAHN,OAGmCC,WAAaC,MAAM,CACpDC,KAAMF,WACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,OAAQN,WAAaO,MAAM,OAAO,EAAM,sCAGpCC,EAAwBR,WAAaC,MAAM,CAC/CQ,MAAOT,WAAaS,QAAQJ,SAAS,YACrCK,SAAUV,WACPG,IAAI,EAAG,qDACPE,SAAS,cAGRM,EAA2BX,WAAaC,MAAM,CAClDC,KAAMF,WACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZI,MAAOT,WAAaS,QAAQJ,SAAS,YACrCK,SAAUV,WACPG,IAAI,EAAG,qDACPE,SAAS,e,iCC1Bd,qFAoFeO,UAnEf,WACE,IAAMC,EAAWC,cAEbC,EAAcC,YAAO,GACrBC,EAAeD,YAAO,GACtBE,EAAkBF,YAAO,GAM7B,OACE,cAAC,IAAD,CACEG,cAAe,CAAEjB,KAAM,GAAIO,MAAO,GAAIC,SAAU,IAChDU,iBAAkBT,IAClBU,SAAU,SAACC,EAAD,GAA4B,IARXC,EAQNC,EAAgB,EAAhBA,UACXtB,EAA0BoB,EAA1BpB,KAAMO,EAAoBa,EAApBb,MAAOC,EAAaY,EAAbZ,SATIa,EAUH,CAAErB,OAAMO,QAAOC,YATzCG,EAASY,YAAOF,IAUZC,KANJ,SASE,cAAC,IAAD,UACE,eAAC,IAAD,CAAYE,aAAa,MAAzB,UACE,cAAC,IAAD,kCACA,eAAC,IAAD,CAAOC,QAAO,aAAQZ,GAAtB,UACE,cAAC,IAAD,IADF,UAIA,cAAC,IAAD,CACEb,KAAK,OACL0B,KAAK,OACLC,GAAE,aAAQd,GACVe,YAAY,SAEd,cAAC,IAAD,CAAc5B,KAAK,OAAO6B,UAAWC,MAErC,eAAC,IAAD,CAAOL,QAAO,aAAQV,GAAtB,UACE,cAAC,IAAD,IADF,WAIA,cAAC,IAAD,CACEf,KAAK,QACL0B,KAAK,QACLC,GAAE,aAAQZ,GACVa,YAAY,sBAEd,cAAC,IAAD,CAAc5B,KAAK,QAAQ6B,UAAWC,MAEtC,eAAC,IAAD,CAAOL,QAAO,aAAQT,GAAtB,UACE,cAAC,IAAD,IADF,cAIA,cAAC,IAAD,CACEhB,KAAK,WACL0B,KAAK,WACLC,GAAE,aAAQX,GACVY,YAAY,aAEd,cAAC,IAAD,CAAc5B,KAAK,WAAW6B,UAAWC,MAEzC,cAAC,IAAD,CAAQJ,KAAK,SAAb","file":"static/js/register.1b6672bd.chunk.js","sourcesContent":["import * as Yup from \"yup\";\nimport \"yup-phone\";\n\nconst addContactValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  number: Yup.string().phone(\"+38\", true, \"Valid number type +380XXXXXXXXX\"),\n});\n\nconst LogInValidationSchema = Yup.object().shape({\n  email: Yup.string().email().required(\"Required\"),\n  password: Yup.string()\n    .min(7, \"Password is too short - should be 7 chars minimum\")\n    .required(\"Required\"),\n});\n\nconst registerValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  email: Yup.string().email().required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Password is too short - should be 6 chars minimum\")\n    .required(\"Required\"),\n});\n\nexport {\n  addContactValidationSchema,\n  LogInValidationSchema,\n  registerValidationSchema,\n};\n","import { useDispatch } from \"react-redux\";\nimport { RiLockPasswordFill, RiUser3Fill } from \"react-icons/ri\";\nimport { FiMail } from \"react-icons/fi\";\nimport { nanoid } from \"nanoid\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport { registerValidationSchema } from \"utils/YupValidationSchemes\";\nimport { signUp } from \"redux/auth\";\nimport {\n  FormWrapper,\n  FormStyled,\n  FormTitle,\n  FieldStyled,\n  Button,\n  Label,\n  ValidationMessage,\n} from \"styles/common.styled\";\n\nfunction RegisterPage() {\n  const dispatch = useDispatch();\n\n  let nameInputId = nanoid(3);\n  let emailInputId = nanoid(3);\n  let passwordInputId = nanoid(3);\n\n  const handleAddUserOnSubmit = (newUser) => {\n    dispatch(signUp(newUser));\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: \"\", email: \"\", password: \"\" }}\n      validationSchema={registerValidationSchema}\n      onSubmit={(values, { resetForm }) => {\n        const { name, email, password } = values;\n        handleAddUserOnSubmit({ name, email, password });\n        resetForm();\n      }}\n    >\n      <FormWrapper>\n        <FormStyled autoComplete=\"off\">\n          <FormTitle>Create your account</FormTitle>\n          <Label htmlFor={`id-${nameInputId}`}>\n            <RiUser3Fill />\n            Name\n          </Label>\n          <FieldStyled\n            name=\"name\"\n            type=\"text\"\n            id={`id-${nameInputId}`}\n            placeholder=\"name\"\n          />\n          <ErrorMessage name=\"name\" component={ValidationMessage} />\n\n          <Label htmlFor={`id-${emailInputId}`}>\n            <FiMail />\n            Email\n          </Label>\n          <FieldStyled\n            name=\"email\"\n            type=\"email\"\n            id={`id-${emailInputId}`}\n            placeholder=\"example@gmail.com\"\n          />\n          <ErrorMessage name=\"email\" component={ValidationMessage} />\n\n          <Label htmlFor={`id-${passwordInputId}`}>\n            <RiLockPasswordFill />\n            Password\n          </Label>\n          <FieldStyled\n            name=\"password\"\n            type=\"password\"\n            id={`id-${passwordInputId}`}\n            placeholder=\"password\"\n          />\n          <ErrorMessage name=\"password\" component={ValidationMessage} />\n\n          <Button type=\"submit\">Join</Button>\n        </FormStyled>\n      </FormWrapper>\n    </Formik>\n  );\n}\n\nexport default RegisterPage;\n"],"sourceRoot":""}